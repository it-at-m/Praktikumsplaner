import{_ as o,D as s,c as r,I as n,l as e,a,a4 as i,o as c}from"./chunks/framework.Bena10jp.js";const P=JSON.parse('{"title":"ADR-008 security-roles","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/architecture/adr/adr008-security-roles.md","filePath":"documentation/architecture/adr/adr008-security-roles.md","lastUpdated":1727014422000}'),d={name:"documentation/architecture/adr/adr008-security-roles.md"},l=e("h1",{id:"adr-008-security-roles",tabindex:"-1"},[a("ADR-008 security-roles "),e("a",{class:"header-anchor",href:"#adr-008-security-roles","aria-label":'Permalink to "ADR-008 security-roles"'},"​")],-1),u=e("h2",{id:"status",tabindex:"-1"},[a("Status "),e("a",{class:"header-anchor",href:"#status","aria-label":'Permalink to "Status"'},"​")],-1),h=i('<h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>We need to restrict access to certain features of the application so users can only use and see what is meant for them.</p><p>Permission-based access would require a non-open source component, and this product should be open source in all aspects.</p><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>We are using a role-based security model in favor of a permission-based model.</p><h3 id="todo" tabindex="-1">Todo <a class="header-anchor" href="#todo" aria-label="Permalink to &quot;Todo&quot;">​</a></h3><ul><li>All backend rest controller methods need the <code>@PreAuthorized</code>-Annotation for role binding</li><li>All frontend components that should be secured should have the custom v-security directive</li><li>Roles for personas have to be defined and implemented in the keycloak</li></ul><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><p>Access restrictions have to be considered for each feature. By using role-based access management, the authorization is less complicated, than it would be with permission-based access management, as the granularity is lower and therefore easier to maintain.</p>',9);function m(p,_,f,b,y,x){const t=s("adr-status");return c(),r("div",null,[l,u,n(t,{status:"accepted"}),h])}const k=o(d,[["render",m]]);export{P as __pageData,k as default};
