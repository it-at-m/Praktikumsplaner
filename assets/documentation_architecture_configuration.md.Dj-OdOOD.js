import{_ as t,c as e,o,a4 as a}from"./chunks/framework.Bena10jp.js";const g=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/architecture/configuration.md","filePath":"documentation/architecture/configuration.md","lastUpdated":1727014287000}'),r={name:"documentation/architecture/configuration.md"},i=a('<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>Besides the spring configuration properties, we created some of our own.</p><p>All our properties are located in <code>application.yml</code> and start with <code>app</code>.</p><h2 id="frontend" tabindex="-1">Frontend <a class="header-anchor" href="#frontend" aria-label="Permalink to &quot;Frontend&quot;">​</a></h2><p>The configuration is split into separate files:</p><ul><li><code>application-routing.yml</code> ... contains the route definitions for the gateway</li><li><code>application-security.yml</code> ... contains the configuration for security</li></ul><p>The following <code>app</code>-properties were defined for the frontend:</p><table><thead><tr><th>propertyname</th><th>description</th></tr></thead><tbody><tr><td>app.gateway.routing.sso.uri</td><td>URL to SSO for route with ID <code>sso</code></td></tr><tr><td>app.gateway.routing.backend.uri</td><td>URL to the backend service (route with ID <code>backend</code>)</td></tr><tr><td>app.gateway.security.keycloak.issuer-uri</td><td>URL to the sso realm. It used to get the sso config, for example. <br> Alias for: <code>spring.security.oauth2.client.provider.keycloak.issuer-uri</code></td></tr><tr><td>app.gateway.security.keycloak.realm</td><td>name of the realm in keycloak</td></tr><tr><td>app.gateway.security.keycloak.client.id</td><td>ID that is used by oauth2 client. <br> Alias for: <code>spring.security.oauth2.client.registration.keycloak.client-id</code></td></tr><tr><td>app.gateway.security.keycloak.client.secret</td><td>secret that is used by oauth2 client. <br> Alias for: <code>spring.security.oauth2.client.registration.keycloak.client-secret</code></td></tr></tbody></table>',8),n=[i];function c(d,s,l,u,p,h){return o(),e("div",null,n)}const y=t(r,[["render",c]]);export{g as __pageData,y as default};
